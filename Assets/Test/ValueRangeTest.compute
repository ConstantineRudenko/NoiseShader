#pragma kernel Aggregate
#pragma kernel Gradient1D
#pragma kernel Classic2D
#pragma kernel Classic3D
#pragma kernel Simplex2D
#pragma kernel Simplex3D

#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Macros.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Random.hlsl"
#include "Packages/jp.keijiro.noiseshader/Shader/Noise1D.hlsl"
#include "Packages/jp.keijiro.noiseshader/Shader/ClassicNoise2D.hlsl"
#include "Packages/jp.keijiro.noiseshader/Shader/ClassicNoise3D.hlsl"
#include "Packages/jp.keijiro.noiseshader/Shader/SimplexNoise2D.hlsl"
#include "Packages/jp.keijiro.noiseshader/Shader/SimplexNoise3D.hlsl"

static const uint TotalIteration = 1u << 30;
static const uint ThreadPerGroup = 64u;
static const uint IterationPerThread = 512u;
static const uint ThreadGroupCount = TotalIteration / ThreadPerGroup / IterationPerThread;
static const float ParameterRange = 300;

float RandomFloat(uint thread_index, uint iteration)
{
    uint seed = thread_index * IterationPerThread + iteration;
    float x = GenerateHashedRandomFloat(seed);
    return (x * 2 - 1) * ParameterRange;
}

float2 RandomFloat2(uint thread_index, uint iteration)
{
    uint seed = (thread_index * IterationPerThread + iteration) * 2u;
    float x = GenerateHashedRandomFloat(seed);
    float y = GenerateHashedRandomFloat(seed + 1u);
    return (float2(x, y) * 2 - 1) * ParameterRange;
}

float3 RandomFloat3(uint thread_index, uint iteration)
{
    uint seed = (thread_index * IterationPerThread + iteration) * 3u;
    float x = GenerateHashedRandomFloat(seed);
    float y = GenerateHashedRandomFloat(seed + 1u);
    float z = GenerateHashedRandomFloat(seed + 2u);
    return (float3(x, y, z) * 2 - 1) * ParameterRange;
}

RWStructuredBuffer<float> _AccBuffer;
RWStructuredBuffer<float> _OutBuffer;

groupshared float shared_array[ThreadPerGroup];

float GetSharedArrayMax()
{
    float temp = shared_array[0];
    for (uint i = 1; i < ThreadPerGroup; i++)
        temp = max(temp, shared_array[i]);
    return temp;
}

[numthreads(1, 1, 1)]
void Aggregate()
{
    float temp = _AccBuffer[0];
    for (uint i = 1; i < ThreadGroupCount; i++)
        temp = max(temp, _AccBuffer[i]);
    _OutBuffer[0] = temp;
}

[numthreads(ThreadPerGroup, 1, 1)]
void Gradient1D(uint group_id : SV_GroupID,
                uint group_thread_id: SV_GroupThreadID,
                uint dispatch_id : SV_DispatchThreadID)
{
    float temp = 0;
    for (uint i = 0; i < IterationPerThread; i++)
        temp = max(temp, abs(GradientNoise(RandomFloat(dispatch_id, i))));
    shared_array[group_thread_id] = temp;
    GroupMemoryBarrierWithGroupSync();
    if (group_thread_id == 0) _AccBuffer[group_id] = GetSharedArrayMax();
}

[numthreads(ThreadPerGroup, 1, 1)]
void Classic2D(uint group_id : SV_GroupID,
               uint group_thread_id: SV_GroupThreadID,
               uint dispatch_id : SV_DispatchThreadID)
{
    float2 temp = 0;
    for (uint i = 0; i < IterationPerThread; i++)
        temp = max(temp, abs(ClassicNoise(RandomFloat2(dispatch_id, i))));
    shared_array[group_thread_id] = max(temp.x, temp.y);
    GroupMemoryBarrierWithGroupSync();
    if (group_thread_id == 0) _AccBuffer[group_id] = GetSharedArrayMax();
}

[numthreads(ThreadPerGroup, 1, 1)]
void Classic3D(uint group_id : SV_GroupID,
               uint group_thread_id: SV_GroupThreadID,
               uint dispatch_id : SV_DispatchThreadID)
{
    float3 temp = 0;
    for (uint i = 0; i < IterationPerThread; i++)
        temp = max(temp, abs(ClassicNoise(RandomFloat3(dispatch_id, i))));
    shared_array[group_thread_id] = max(max(temp.x, temp.y), temp.z);
    GroupMemoryBarrierWithGroupSync();
    if (group_thread_id == 0) _AccBuffer[group_id] = GetSharedArrayMax();
}

[numthreads(ThreadPerGroup, 1, 1)]
void Simplex2D(uint group_id : SV_GroupID,
               uint group_thread_id: SV_GroupThreadID,
               uint dispatch_id : SV_DispatchThreadID)
{
    float2 temp = 0;
    for (uint i = 0; i < IterationPerThread; i++)
        temp = max(temp, abs(SimplexNoise(RandomFloat2(dispatch_id, i))));
    shared_array[group_thread_id] = max(temp.x, temp.y);
    GroupMemoryBarrierWithGroupSync();
    if (group_thread_id == 0) _AccBuffer[group_id] = GetSharedArrayMax();
}

[numthreads(ThreadPerGroup, 1, 1)]
void Simplex3D(uint group_id : SV_GroupID,
               uint group_thread_id: SV_GroupThreadID,
               uint dispatch_id : SV_DispatchThreadID)
{
    float3 temp = 0;
    for (uint i = 0; i < IterationPerThread; i++)
        temp = max(temp, abs(SimplexNoise(RandomFloat3(dispatch_id, i))));
    shared_array[group_thread_id] = max(max(temp.x, temp.y), temp.z);
    GroupMemoryBarrierWithGroupSync();
    if (group_thread_id == 0) _AccBuffer[group_id] = GetSharedArrayMax();
}
